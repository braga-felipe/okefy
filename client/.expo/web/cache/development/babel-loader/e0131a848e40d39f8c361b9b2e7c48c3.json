{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport InteractionManager from \"react-native-web/dist/exports/InteractionManager\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport React from 'react';\nimport { usePlayListSeedContext } from \"../context/playlistSeedContext\";\nimport { useAuthContext } from \"../context/authContext\";\nimport { useSliderContext } from \"../context/sliderContext\";\nimport SongPlaylistComponent from \"../components/SongPlaylistComponent\";\nimport SongModal from \"../components/SongModal\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar SpotifyWebApi = require('spotify-web-api-node');\n\nvar SpotifyApi = new SpotifyWebApi();\n\nvar PlaylistScreen = function PlaylistScreen() {\n  var playlistSeedContext = usePlayListSeedContext();\n  var sliderContext = useSliderContext();\n  var authContext = useAuthContext();\n  SpotifyApi.setAccessToken(authContext.Token);\n\n  var _React$useState = React.useState([]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      playList = _React$useState2[0],\n      setPlayList = _React$useState2[1];\n\n  var playlistId = '';\n  var recommendations = [];\n  var recommendationsUri = [];\n\n  var sendPlaylist = function sendPlaylist() {\n    console.log('sending playlist');\n    SpotifyApi.createPlaylist('Test', {\n      description: 'test playlist',\n      public: true\n    }).then(function (data) {\n      playlistId = data.body.id;\n      console.log('Created playlist!', playlistId);\n      return data.body.id;\n    }, function (err) {\n      console.log('Something went wrong!', err);\n    }).then(function (id) {\n      return SpotifyApi.addTracksToPlaylist(id, recommendationsUri);\n    });\n  };\n\n  React.useEffect(function () {\n    SpotifyApi.getRecommendations({\n      target_energy: Number(sliderContext.Energy),\n      target_danceability: Number(sliderContext.Dance),\n      target_popularity: Number(sliderContext.Popular),\n      target_instrumentalness: Number(sliderContext.Instrument),\n      seed_genres: playlistSeedContext.Playlist.join(','),\n      limit: 20\n    }).then(function (data) {\n      recommendations = data.body.tracks;\n      setPlayList(_toConsumableArray(recommendations));\n    }, function (err) {\n      console.log('Something went wrong!', err);\n    });\n  }, []);\n\n  var _React$useState3 = React.useState('false'),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      modalVisible = _React$useState4[0],\n      setModalVisible = _React$useState4[1];\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      children: \"PlaylistScreen\"\n    }), _jsxs(ScrollView, {\n      children: [playList.map(function (item, index) {\n        recommendationsUri.push(item.uri);\n        return _jsx(SongPlaylistComponent, {\n          item: item\n        }, index);\n      }), console.log(recommendationsUri)]\n    }), _jsx(SongModal, {}), _jsx(Button, {\n      title: \"send\",\n      onPress: function onPress() {\n        sendPlaylist();\n      },\n      style: styles.btn\n    })]\n  });\n};\n\nexport default PlaylistScreen;\nvar styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginVertical: 60,\n    marginHorizontal: 20\n  },\n  btn: {\n    marginVertical: 30\n  },\n  modal: {\n    marginVertical: 70,\n    width: 200,\n    height: 200,\n    backgroundColor: '#ca9fed'\n  }\n});","map":{"version":3,"sources":["/Users/alexandraplana/Desktop/okey/client/screens/PlaylistScreen.js"],"names":["React","usePlayListSeedContext","useAuthContext","useSliderContext","SongPlaylistComponent","SongModal","SpotifyWebApi","require","SpotifyApi","PlaylistScreen","playlistSeedContext","sliderContext","authContext","setAccessToken","Token","useState","playList","setPlayList","playlistId","recommendations","recommendationsUri","sendPlaylist","console","log","createPlaylist","description","public","then","data","body","id","err","addTracksToPlaylist","useEffect","getRecommendations","target_energy","Number","Energy","target_danceability","Dance","target_popularity","Popular","target_instrumentalness","Instrument","seed_genres","Playlist","join","limit","tracks","modalVisible","setModalVisible","styles","container","map","item","index","push","uri","btn","StyleSheet","create","alignItems","justifyContent","marginVertical","marginHorizontal","modal","width","height","backgroundColor"],"mappings":"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","sourcesContent":["import {\n  InteractionManager,\n  StyleSheet,\n  Text,\n  View,\n  Button,\n  ScrollView,\n  Pressable\n} from 'react-native';\nimport React from 'react';\n//CONTEXT\nimport { usePlayListSeedContext } from '../context/playlistSeedContext';\nimport { useAuthContext } from '../context/authContext';\nimport { useSliderContext } from '../context/sliderContext';\n\n//COMPONENTS\nimport SongPlaylistComponent from '../components/SongPlaylistComponent';\nimport SongModal from '../components/SongModal';\n// import ModalTest from '../components/';\n\n\nconst SpotifyWebApi = require('spotify-web-api-node');\nconst SpotifyApi = new SpotifyWebApi();\n\nconst PlaylistScreen = () => {\n  const playlistSeedContext = usePlayListSeedContext();\n  const sliderContext=useSliderContext();\n\n  const authContext = useAuthContext();\n  SpotifyApi.setAccessToken(authContext.Token);\n  const [playList, setPlayList] = React.useState([]);\n\n  let playlistId = '';\n  let recommendations = [];\n  let recommendationsUri = [];\n\n  const sendPlaylist = () => {\n    console.log('sending playlist');\n    SpotifyApi.createPlaylist('Test', {\n      description: 'test playlist',\n      public: true,\n    })\n      .then(\n        function (data) {\n          playlistId = data.body.id;\n          console.log('Created playlist!', playlistId);\n          return data.body.id\n        },\n        function (err) {\n          console.log('Something went wrong!', err);\n        }\n      ).then(\n          function(id){\n              return SpotifyApi.addTracksToPlaylist(id, recommendationsUri)\n          }\n      )\n\n  };\n\n  React.useEffect(() => {\n    SpotifyApi.getRecommendations({\n      target_energy:Number(sliderContext.Energy),\n      target_danceability:Number(sliderContext.Dance),\n      target_popularity: Number(sliderContext.Popular),\n      target_instrumentalness:Number(sliderContext.Instrument),\n      seed_genres: playlistSeedContext.Playlist.join(','),\n      limit: 20,\n    }).then(\n      function (data) {\n        recommendations = data.body.tracks;\n        setPlayList([...recommendations]);\n        // playlistContext.Playlist = [...recommendations];\n\n      },\n      function (err) {\n        console.log('Something went wrong!', err);\n      }\n    );\n  }, []);\n  const [modalVisible,setModalVisible]=React.useState('false')\n\n  return (\n    <View style={styles.container}>\n      <Text>PlaylistScreen</Text>\n      <ScrollView>\n\n      {playList.map((item, index) => {\n          recommendationsUri.push(item.uri);\n        return <SongPlaylistComponent key={index} item={item} />;\n      })}\n      {console.log(recommendationsUri)}\n      </ScrollView>\n      {/* <SongModal modalVisible={modalVisible} setModalVisible={setModalVisible} style={styles.modal}>\n      </SongModal> */}\n      <SongModal/>\n   \n\n      <Button\n        title=\"send\"\n        onPress={() => {\n          sendPlaylist();\n        }}\n        style={styles.btn}\n      ></Button>\n    </View>\n  );\n};\n\nexport default PlaylistScreen;\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginVertical: 60,\n    marginHorizontal:20,\n    \n  },\n  btn:{\n    marginVertical:30,\n  },\n  modal:{\n    marginVertical:70,\n    width:200,\n    height:200,\n    backgroundColor:'#ca9fed',\n  }\n});\n\n//!TODO SWIPE DOWN TO REFRESH\n"]},"metadata":{},"sourceType":"module"}