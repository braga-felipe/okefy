{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport { TouchableOpacity } from 'react-native-gesture-handler';\nimport React from 'react';\nimport ButtonComponent from \"./ButtonComponent\";\nimport { useAuthContext } from \"../context/authContext\";\nimport { usePlayListSeedContext } from \"../context/playlistSeedContext\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar SpotifyWebApi = require('spotify-web-api-node');\n\nvar SpotifyApi = new SpotifyWebApi();\n\nvar ButtonContainer = function ButtonContainer() {\n  var playlistSeedContext = usePlayListSeedContext();\n  var authContext = useAuthContext();\n\n  var _React$useState = React.useState([]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      listOfGenres = _React$useState2[0],\n      setListOfGenres = _React$useState2[1];\n\n  var _React$useState3 = React.useState([]),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      selectedItems = _React$useState4[0],\n      setSelectedItems = _React$useState4[1];\n\n  var selectHandler = function selectHandler(item) {\n    if (selectedItems.length < 5) {\n      if (selectedItems.includes(item)) {\n        var newSelectedItems = selectedItems.filter(function (i) {\n          return i !== item;\n        });\n        playlistSeedContext.Playlist = _toConsumableArray(selectedItems);\n        console.log(newSelectedItems);\n        return setSelectedItems(newSelectedItems);\n      }\n\n      setSelectedItems([].concat(_toConsumableArray(selectedItems), [item]));\n      console.log(selectedItems);\n      playlistSeedContext.Playlist = _toConsumableArray(selectedItems);\n    } else if (selectedItems.includes(item)) {\n      var _newSelectedItems = selectedItems.filter(function (i) {\n        return i !== item;\n      });\n\n      playlistSeedContext.Playlist = _toConsumableArray(_newSelectedItems);\n      console.log(_newSelectedItems);\n      return setSelectedItems(_newSelectedItems);\n    }\n  };\n\n  var hasBeenSelected = function hasBeenSelected(item) {\n    return selectedItems.includes(item);\n  };\n\n  if (authContext.Token) {\n    SpotifyApi.setAccessToken(authContext.Token);\n    React.useEffect(function () {\n      SpotifyApi.getAvailableGenreSeeds().then(function (data) {\n        var genreSeeds = data.body;\n        setListOfGenres(genreSeeds.genres.slice(0, 15));\n      }, function (err) {\n        console.log('Something went wrong!', err);\n      });\n    }, []);\n  }\n\n  return _jsx(View, {\n    style: styles.buttonContainer,\n    children: listOfGenres.length ? listOfGenres.map(function (seed, key) {\n      return _jsx(Pressable, {\n        onPress: function onPress() {\n          return selectHandler(seed);\n        },\n        children: _jsx(TouchableOpacity, {\n          children: _jsx(View, {\n            children: _jsx(ButtonComponent, {\n              genre: seed,\n              selected: hasBeenSelected(seed)\n            })\n          })\n        })\n      }, key);\n    }) : _jsx(Text, {\n      children: \"nothing yet\"\n    })\n  });\n};\n\nexport default ButtonContainer;\nvar styles = StyleSheet.create({\n  buttonContainer: {\n    paddingVertical: 50,\n    paddingHorizontal: 40,\n    backgroundColor: '#d3beed',\n    width: '100%',\n    alignItems: 'center',\n    justifyContent: 'space-evenly',\n    flex: 1,\n    flexDirection: 'row',\n    flexWrap: 'wrap'\n  }\n});","map":{"version":3,"sources":["/Users/alexandraplana/Desktop/okey/client/components/ButtonContainer.js"],"names":["TouchableOpacity","React","ButtonComponent","useAuthContext","usePlayListSeedContext","SpotifyWebApi","require","SpotifyApi","ButtonContainer","playlistSeedContext","authContext","useState","listOfGenres","setListOfGenres","selectedItems","setSelectedItems","selectHandler","item","length","includes","newSelectedItems","filter","i","Playlist","console","log","hasBeenSelected","Token","setAccessToken","useEffect","getAvailableGenreSeeds","then","data","genreSeeds","body","genres","slice","err","styles","buttonContainer","map","seed","key","StyleSheet","create","paddingVertical","paddingHorizontal","backgroundColor","width","alignItems","justifyContent","flex","flexDirection","flexWrap"],"mappings":"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","sourcesContent":["import {Text, View, StyleSheet, Pressable  } from 'react-native';\nimport {TouchableOpacity } from 'react-native-gesture-handler';\nimport React from 'react';\nimport ButtonComponent from './ButtonComponent';\nimport { useAuthContext } from '../context/authContext';\nimport { usePlayListSeedContext } from '../context/playlistSeedContext';\n\n//API\nconst SpotifyWebApi = require('spotify-web-api-node');\nconst SpotifyApi = new SpotifyWebApi();\n\nconst ButtonContainer = () => {\n  const playlistSeedContext = usePlayListSeedContext();\n  const authContext=useAuthContext();\n  const [listOfGenres, setListOfGenres] = React.useState([]);\n  const [selectedItems, setSelectedItems] = React.useState([]);\n\n // SELECTED BUTTONS HANDLER\n\n  const selectHandler = (item) => {\n    if (selectedItems.length < 5) {\n      if (selectedItems.includes(item)) {\n        const newSelectedItems = selectedItems.filter((i) => i !== item);\n        playlistSeedContext.Playlist = [...selectedItems]; //!\n        console.log(newSelectedItems);\n        return setSelectedItems(newSelectedItems);\n      }\n      setSelectedItems([...selectedItems, item]);\n      console.log(selectedItems);\n      playlistSeedContext.Playlist = [...selectedItems];\n    } else if (selectedItems.includes(item)) {\n      const newSelectedItems = selectedItems.filter((i) => i !== item);\n      playlistSeedContext.Playlist = [...newSelectedItems]; //!\n      console.log(newSelectedItems);\n      return setSelectedItems(newSelectedItems);\n    }\n  };\n\n  const hasBeenSelected = (item) => {\n    return selectedItems.includes(item);\n  };\n // GET AVAILABLE GENRE SEEDS\n\n  if (authContext.Token) {\n    SpotifyApi.setAccessToken(authContext.Token);\n\n    React.useEffect(() => {\n      SpotifyApi.getAvailableGenreSeeds().then(\n        function (data) {\n          const genreSeeds = data.body;\n          setListOfGenres(genreSeeds.genres.slice(0, 15));\n        },\n        function (err) {\n          console.log('Something went wrong!', err);\n        }\n      );\n    }, []);\n  }\n\n  return (\n    <View style={styles.buttonContainer}>\n      {listOfGenres.length ? (\n        listOfGenres.map((seed, key) => {\n          return (\n            <Pressable key={key} onPress={() => selectHandler(seed)}>\n              <TouchableOpacity>\n                <View>\n                  <ButtonComponent\n                    genre={seed}\n                    selected={hasBeenSelected(seed)}\n                  />\n                </View>\n              </TouchableOpacity>\n            </Pressable>\n          );\n        })\n      ) : (\n        <Text>nothing yet</Text>\n      )}\n    </View>\n  );\n\n\n};\n\nexport default ButtonContainer;\n\nconst styles = StyleSheet.create({\n  buttonContainer: {\n    paddingVertical: 50,\n    paddingHorizontal:40,\n    backgroundColor: '#d3beed',\n    width: '100%',\n    alignItems: 'center',\n    justifyContent:'space-evenly',\n    flex: 1,\n    flexDirection:'row',\n    flexWrap:'wrap'\n\n  },\n});\n"]},"metadata":{},"sourceType":"module"}