{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport * as WebBrowser from 'expo-web-browser';\nimport { ResponseType, useAuthRequest } from 'expo-auth-session';\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { SafeAreaView } from 'react-navigation';\nimport { useAuthContext } from \"../context/authContext\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar authData = {\n  client_id: '3448de32fc284d9d953165c8f73d89c7',\n  redirectUri: 'exp://192.168.1.153:19000'\n};\n\nvar SpotifyWebApi = require('spotify-web-api-node');\n\nvar SpotifyApi = new SpotifyWebApi();\nWebBrowser.maybeCompleteAuthSession();\nvar discovery = {\n  authorizationEndpoint: 'https://accounts.spotify.com/authorize',\n  tokenEndpoint: 'https://accounts.spotify.com/api/token'\n};\nexport default function LoginScreen(_ref) {\n  var navigation = _ref.navigation;\n  var authContext = useAuthContext();\n\n  var _useAuthRequest = useAuthRequest({\n    responseType: ResponseType.Token,\n    clientId: authData.client_id,\n    scopes: ['user-read-email', 'playlist-modify-public', 'user-read-private', 'user-modify-playback-state', 'user-read-playback-state', 'streaming', 'playlist-modify-public', 'user-read-recently-played', 'user-library-read'],\n    usePKCE: false,\n    redirectUri: authData.redirectUri,\n    json: true\n  }, discovery),\n      _useAuthRequest2 = _slicedToArray(_useAuthRequest, 3),\n      request = _useAuthRequest2[0],\n      response = _useAuthRequest2[1],\n      promptAsync = _useAuthRequest2[2];\n\n  React.useEffect(function () {\n    if ((response == null ? void 0 : response.type) === 'success') {\n      var access_token = response.params.access_token;\n\n      if (access_token) {\n        authContext.Token = access_token;\n        navigation.navigate('MainScreen');\n      }\n    }\n  }, [response]);\n  return _jsx(SafeAreaView, {\n    children: _jsx(View, {\n      style: styles.container,\n      children: _jsx(Button, {\n        disabled: !request,\n        title: \"Login\",\n        onPress: function onPress() {\n          promptAsync();\n        }\n      })\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    marginVertical: 100,\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["/Users/alexandraplana/Desktop/okey/client/screens/LoginScreen.js"],"names":["React","WebBrowser","ResponseType","useAuthRequest","SafeAreaView","useAuthContext","authData","client_id","redirectUri","SpotifyWebApi","require","SpotifyApi","maybeCompleteAuthSession","discovery","authorizationEndpoint","tokenEndpoint","LoginScreen","navigation","authContext","responseType","Token","clientId","scopes","usePKCE","json","request","response","promptAsync","useEffect","type","access_token","params","navigate","styles","container","StyleSheet","create","marginVertical","alignItems","justifyContent"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAO,KAAKC,UAAZ,MAA4B,kBAA5B;AACA,SACEC,YADF,EAEEC,cAFF,QAGO,mBAHP;;;;AAKA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,cAAT;;AAEA,IAAMC,QAAQ,GAAG;AACfC,EAAAA,SAAS,EAAE,kCADI;AAEfC,EAAAA,WAAW,EAAE;AAFE,CAAjB;;AAQA,IAAMC,aAAa,GAACC,OAAO,CAAC,sBAAD,CAA3B;;AACA,IAAMC,UAAU,GAAG,IAAIF,aAAJ,EAAnB;AAEAR,UAAU,CAACW,wBAAX;AAGA,IAAMC,SAAS,GAAG;AAChBC,EAAAA,qBAAqB,EAAE,wCADP;AAEhBC,EAAAA,aAAa,EAAE;AAFC,CAAlB;AAOA,eAAe,SAASC,WAAT,OAAqC;AAAA,MAAdC,UAAc,QAAdA,UAAc;AAClD,MAAMC,WAAW,GAACb,cAAc,EAAhC;;AACA,wBAAyCF,cAAc,CACrD;AACEgB,IAAAA,YAAY,EAAEjB,YAAY,CAACkB,KAD7B;AAEEC,IAAAA,QAAQ,EAAEf,QAAQ,CAACC,SAFrB;AAGEe,IAAAA,MAAM,EAAE,CACN,iBADM,EAEN,wBAFM,EAGN,mBAHM,EAIN,4BAJM,EAKN,0BALM,EAMN,WANM,EAON,wBAPM,EAQN,2BARM,EASN,mBATM,CAHV;AAgBEC,IAAAA,OAAO,EAAE,KAhBX;AAiBEf,IAAAA,WAAW,EAAEF,QAAQ,CAACE,WAjBxB;AAkBEgB,IAAAA,IAAI,EAAC;AAlBP,GADqD,EAqBrDX,SArBqD,CAAvD;AAAA;AAAA,MAAOY,OAAP;AAAA,MAAgBC,QAAhB;AAAA,MAA0BC,WAA1B;;AAwBA3B,EAAAA,KAAK,CAAC4B,SAAN,CAAgB,YAAM;AACpB,QAAI,CAAAF,QAAQ,QAAR,YAAAA,QAAQ,CAAEG,IAAV,MAAmB,SAAvB,EAAkC;AAChC,UAAQC,YAAR,GAAyBJ,QAAQ,CAACK,MAAlC,CAAQD,YAAR;;AACA,UAAIA,YAAJ,EAAkB;AAEhBZ,QAAAA,WAAW,CAACE,KAAZ,GAAkBU,YAAlB;AACAb,QAAAA,UAAU,CAACe,QAAX,CAAoB,YAApB;AAED;AACF;AACF,GAVD,EAUG,CAACN,QAAD,CAVH;AAcA,SACE,KAAC,YAAD;AAAA,cACE,KAAC,IAAD;AAAM,MAAA,KAAK,EAAEO,MAAM,CAACC,SAApB;AAAA,gBACE,KAAC,MAAD;AACE,QAAA,QAAQ,EAAE,CAACT,OADb;AAEE,QAAA,KAAK,EAAC,OAFR;AAGE,QAAA,OAAO,EAAE,mBAAM;AACbE,UAAAA,WAAW;AACZ;AALH;AADF;AADF,IADF;AAaD;AACD,IAAMM,MAAM,GAACE,UAAU,CAACC,MAAX,CAAkB;AAC7BF,EAAAA,SAAS,EAAC;AACRG,IAAAA,cAAc,EAAC,GADP;AAERC,IAAAA,UAAU,EAAC,QAFH;AAGRC,IAAAA,cAAc,EAAC;AAHP;AADmB,CAAlB,CAAb","sourcesContent":["import * as React from 'react';\nimport * as WebBrowser from 'expo-web-browser';\nimport {\n  ResponseType,\n  useAuthRequest,\n} from 'expo-auth-session';\nimport { Button, StyleSheet, View } from 'react-native';\nimport { SafeAreaView } from 'react-navigation';\nimport { useAuthContext } from '../context/authContext';\n\nconst authData = {\n  client_id: '3448de32fc284d9d953165c8f73d89c7',\n  redirectUri: 'exp://192.168.1.153:19000',\n};\n\n\n\n// import SpotifyWebApi from '../../client/src';\nconst SpotifyWebApi=require('spotify-web-api-node');\nconst SpotifyApi = new SpotifyWebApi();\n\nWebBrowser.maybeCompleteAuthSession();\n\n// Endpoint\nconst discovery = {\n  authorizationEndpoint: 'https://accounts.spotify.com/authorize',\n  tokenEndpoint: 'https://accounts.spotify.com/api/token',\n};\n\n\n\nexport default function LoginScreen({ navigation }) {\n  const authContext=useAuthContext();\n  const [request, response, promptAsync] = useAuthRequest(\n    {\n      responseType: ResponseType.Token,\n      clientId: authData.client_id,\n      scopes: [\n        'user-read-email',\n        'playlist-modify-public',\n        'user-read-private',\n        'user-modify-playback-state',\n        'user-read-playback-state',\n        'streaming',\n        'playlist-modify-public',\n        'user-read-recently-played',\n        'user-library-read'\n      ],\n      // In order to follow the \"Authorization Code Flow\" to fetch token after authorizationEndpoint\n      // this must be set to false\n      usePKCE: false,\n      redirectUri: authData.redirectUri,\n      json:true,\n    },\n    discovery\n  );\n\n  React.useEffect(() => {\n    if (response?.type === 'success') {\n      const { access_token } = response.params;\n      if (access_token) {\n        // setToken(access_token);\n        authContext.Token=access_token;\n        navigation.navigate('MainScreen');\n        \n      }\n    }\n  }, [response]);\n\n  \n\n  return (\n    <SafeAreaView>\n      <View style={styles.container}>\n        <Button\n          disabled={!request}\n          title=\"Login\"\n          onPress={() => {\n            promptAsync();\n          }}\n        />\n      </View>\n    </SafeAreaView>\n  );\n}\nconst styles=StyleSheet.create({\n  container:{\n    marginVertical:100,\n    alignItems:'center',\n    justifyContent:'center'\n  }\n})"]},"metadata":{},"sourceType":"module"}